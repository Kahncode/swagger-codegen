/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGUserApi.h"

#include "SWGModule.h"
#include "SWGModel.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace Swagger 
{

SWGUserApi::SWGUserApi() {}

SWGUserApi::~SWGUserApi() {}

SWGUserApi::SWGUserApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void SWGUserApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void SWGUserApi::SetAuthCredentials(const FString& InAuthKey, const FString& InAuthValue)
{
	AuthKey = InAuthKey;
	AuthValue = InAuthValue;
}

bool SWGUserApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(Log, Error, TEXT("SWGUserApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

TSharedRef<IHttpRequest> SWGUserApi::SendRequest(const TCHAR* Path, const TSharedPtr<FJsonObject>& Body) const
{
	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetVerb(TEXT("POST"));
	HttpRequest->SetURL(*FString::Printf(TEXT("%s/%s"), *Url, Path));
	HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));

	if (!AuthKey.IsEmpty())
		HttpRequest->SetHeader(AuthKey, AuthValue);

	FString JsonString;
	auto Writer = TJsonWriterFactory<>::Create(&JsonString);
	FJsonSerializer::Serialize(Body.ToSharedRef(), Writer);

	UE_LOG(Log, Verbose, TEXT("Sending Http request to (%s):\n%s"), *HttpRequest->GetURL(), *JsonString);

	HttpRequest->SetContentAsString(JsonString);
	return HttpRequest;
}

void SWGUserApi::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const
{
	InOutResponse._Success = bSucceeded;

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse._ResponseCode = (EHttpResponseCodes::Type)HttpResponse->GetResponseCode();
		FString Content = HttpResponse->GetContentAsString();

		UE_LOG(Log, Verbose, TEXT("Received response:: \n%s"), *Content);

		TSharedPtr<FJsonObject> JsonObject;
		auto Reader = TJsonReaderFactory<>::Create(Content);

		if (FJsonSerializer::Deserialize(Reader, JsonObject) && JsonObject.IsValid())
		{
			if (EHttpResponseCodes::IsOk(InOutResponse._ResponseCode))
			{
				if (InOutResponse.FromJson(JsonObject))
					return; //Successfully parsed
			}
			else
			{
				if (InOutResponse.ErrorFromJson(JsonObject))
					return; //Successfully parsed
			}
		}

		UE_LOG(Log, Error, TEXT("Failed to deserialize Http response content:\n%s"), *Content);
		InOutResponse._Success = false;
		return;
	}

	// Assume we failed to reach the server
	InOutResponse._ResponseCode = EHttpResponseCodes::RequestTimeout;
}

bool SWGUserApi::createUser(createUserRequest& Request, const FcreateUserDelegate& Delegate /*= FcreateUserDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/User"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGUserApi::OncreateUserResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGUserApi::OncreateUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FcreateUserDelegate Delegate) const
{
	createUserResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}

bool SWGUserApi::createUsersWithArrayInput(createUsersWithArrayInputRequest& Request, const FcreateUsersWithArrayInputDelegate& Delegate /*= FcreateUsersWithArrayInputDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/User"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGUserApi::OncreateUsersWithArrayInputResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGUserApi::OncreateUsersWithArrayInputResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FcreateUsersWithArrayInputDelegate Delegate) const
{
	createUsersWithArrayInputResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}

bool SWGUserApi::createUsersWithListInput(createUsersWithListInputRequest& Request, const FcreateUsersWithListInputDelegate& Delegate /*= FcreateUsersWithListInputDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/User"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGUserApi::OncreateUsersWithListInputResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGUserApi::OncreateUsersWithListInputResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FcreateUsersWithListInputDelegate Delegate) const
{
	createUsersWithListInputResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}

bool SWGUserApi::deleteUser(deleteUserRequest& Request, const FdeleteUserDelegate& Delegate /*= FdeleteUserDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/User"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGUserApi::OndeleteUserResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGUserApi::OndeleteUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FdeleteUserDelegate Delegate) const
{
	deleteUserResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}

bool SWGUserApi::getUserByName(getUserByNameRequest& Request, const FgetUserByNameDelegate& Delegate /*= FgetUserByNameDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/User"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGUserApi::OngetUserByNameResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGUserApi::OngetUserByNameResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FgetUserByNameDelegate Delegate) const
{
	getUserByNameResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}

bool SWGUserApi::loginUser(loginUserRequest& Request, const FloginUserDelegate& Delegate /*= FloginUserDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/User"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGUserApi::OnloginUserResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGUserApi::OnloginUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FloginUserDelegate Delegate) const
{
	loginUserResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}

bool SWGUserApi::logoutUser(logoutUserRequest& Request, const FlogoutUserDelegate& Delegate /*= FlogoutUserDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/User"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGUserApi::OnlogoutUserResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGUserApi::OnlogoutUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FlogoutUserDelegate Delegate) const
{
	logoutUserResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}

bool SWGUserApi::updateUser(updateUserRequest& Request, const FupdateUserDelegate& Delegate /*= FupdateUserDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/User"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGUserApi::OnupdateUserResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGUserApi::OnupdateUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FupdateUserDelegate Delegate) const
{
	updateUserResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}


}
