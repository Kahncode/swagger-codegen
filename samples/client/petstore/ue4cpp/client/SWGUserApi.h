/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"

#include "SWGModels.h"

class IHttpRequest;
class IHttpResponse;

typedef TSharedPtr<IHttpRequest> FHttpRequestPtr;
typedef TSharedPtr<IHttpResponse, ESPMode::ThreadSafe> FHttpResponsePtr;

class FJsonObject;

#include "SWGUser.h"

namespace Swagger 
{

    class SWG_API SWGUserApi
	{
	public:
		SWGUserApi();
		~SWGUserApi();

		void SetURL(const FString& Url);
		void SetAuthCredentials(const FString& AuthKey, const FString& AuthValue);

        DECLARE_DELEGATE_OneParam(FcreateUserDelegate, const createUserResponse&);
        DECLARE_DELEGATE_OneParam(FcreateUsersWithArrayInputDelegate, const createUsersWithArrayInputResponse&);
        DECLARE_DELEGATE_OneParam(FcreateUsersWithListInputDelegate, const createUsersWithListInputResponse&);
        DECLARE_DELEGATE_OneParam(FdeleteUserDelegate, const deleteUserResponse&);
        DECLARE_DELEGATE_OneParam(FgetUserByNameDelegate, const getUserByNameResponse&);
        DECLARE_DELEGATE_OneParam(FloginUserDelegate, const loginUserResponse&);
        DECLARE_DELEGATE_OneParam(FlogoutUserDelegate, const logoutUserResponse&);
        DECLARE_DELEGATE_OneParam(FupdateUserDelegate, const updateUserResponse&);
        

        bool createUser(const createUserRequest& Request, const FcreateUserDelegate Delegate = FcreateUserDelegate()) const;
        bool createUsersWithArrayInput(const createUsersWithArrayInputRequest& Request, const FcreateUsersWithArrayInputDelegate Delegate = FcreateUsersWithArrayInputDelegate()) const;
        bool createUsersWithListInput(const createUsersWithListInputRequest& Request, const FcreateUsersWithListInputDelegate Delegate = FcreateUsersWithListInputDelegate()) const;
        bool deleteUser(const deleteUserRequest& Request, const FdeleteUserDelegate Delegate = FdeleteUserDelegate()) const;
        bool getUserByName(const getUserByNameRequest& Request, const FgetUserByNameDelegate Delegate = FgetUserByNameDelegate()) const;
        bool loginUser(const loginUserRequest& Request, const FloginUserDelegate Delegate = FloginUserDelegate()) const;
        bool logoutUser(const logoutUserRequest& Request, const FlogoutUserDelegate Delegate = FlogoutUserDelegate()) const;
        bool updateUser(const updateUserRequest& Request, const FupdateUserDelegate Delegate = FupdateUserDelegate()) const;
        

	private:
        void OncreateUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FcreateUserDelegate Delegate) const;
        void OncreateUsersWithArrayInputResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FcreateUsersWithArrayInputDelegate Delegate) const;
        void OncreateUsersWithListInputResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FcreateUsersWithListInputDelegate Delegate) const;
        void OndeleteUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FdeleteUserDelegate Delegate) const;
        void OngetUserByNameResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FgetUserByNameDelegate Delegate) const;
        void OnloginUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FloginUserDelegate Delegate) const;
        void OnlogoutUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FlogoutUserDelegate Delegate) const;
        void OnupdateUserResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FupdateUserDelegate Delegate) const;
        

		bool IsValid() const;
		TSharedRef<IHttpRequest> SendRequest(const TCHAR* Path, const TSharedPtr<FJsonObject>& Body) const;
		void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& Respose) const;

		FString Url;
		FString AuthKey;
		FString AuthValue;
	};

}
