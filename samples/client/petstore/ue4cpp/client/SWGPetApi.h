/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"

#include "SWGModels.h"

class IHttpRequest;
class IHttpResponse;

typedef TSharedPtr<IHttpRequest> FHttpRequestPtr;
typedef TSharedPtr<IHttpResponse, ESPMode::ThreadSafe> FHttpResponsePtr;

class FJsonObject;

#include "SWGApiResponse.h"
#include "SWGHttpRequestInputFileElement.h"
#include "SWGPet.h"

namespace Swagger 
{

    class SWG_API SWGPetApi
	{
	public:
		SWGPetApi();
		~SWGPetApi();

		void SetURL(const FString& Url);
		void SetAuthCredentials(const FString& AuthKey, const FString& AuthValue);

        DECLARE_DELEGATE_OneParam(FaddPetDelegate, const addPetResponse&);
        DECLARE_DELEGATE_OneParam(FdeletePetDelegate, const deletePetResponse&);
        DECLARE_DELEGATE_OneParam(FfindPetsByStatusDelegate, const findPetsByStatusResponse&);
        DECLARE_DELEGATE_OneParam(FfindPetsByTagsDelegate, const findPetsByTagsResponse&);
        DECLARE_DELEGATE_OneParam(FgetPetByIdDelegate, const getPetByIdResponse&);
        DECLARE_DELEGATE_OneParam(FupdatePetDelegate, const updatePetResponse&);
        DECLARE_DELEGATE_OneParam(FupdatePetWithFormDelegate, const updatePetWithFormResponse&);
        DECLARE_DELEGATE_OneParam(FuploadFileDelegate, const uploadFileResponse&);
        

        bool addPet(const addPetRequest& Request, const FaddPetDelegate Delegate = FaddPetDelegate()) const;
        bool deletePet(const deletePetRequest& Request, const FdeletePetDelegate Delegate = FdeletePetDelegate()) const;
        bool findPetsByStatus(const findPetsByStatusRequest& Request, const FfindPetsByStatusDelegate Delegate = FfindPetsByStatusDelegate()) const;
        bool findPetsByTags(const findPetsByTagsRequest& Request, const FfindPetsByTagsDelegate Delegate = FfindPetsByTagsDelegate()) const;
        bool getPetById(const getPetByIdRequest& Request, const FgetPetByIdDelegate Delegate = FgetPetByIdDelegate()) const;
        bool updatePet(const updatePetRequest& Request, const FupdatePetDelegate Delegate = FupdatePetDelegate()) const;
        bool updatePetWithForm(const updatePetWithFormRequest& Request, const FupdatePetWithFormDelegate Delegate = FupdatePetWithFormDelegate()) const;
        bool uploadFile(const uploadFileRequest& Request, const FuploadFileDelegate Delegate = FuploadFileDelegate()) const;
        

	private:
        void OnaddPetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FaddPetDelegate Delegate) const;
        void OndeletePetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FdeletePetDelegate Delegate) const;
        void OnfindPetsByStatusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FfindPetsByStatusDelegate Delegate) const;
        void OnfindPetsByTagsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FfindPetsByTagsDelegate Delegate) const;
        void OngetPetByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FgetPetByIdDelegate Delegate) const;
        void OnupdatePetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FupdatePetDelegate Delegate) const;
        void OnupdatePetWithFormResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FupdatePetWithFormDelegate Delegate) const;
        void OnuploadFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FuploadFileDelegate Delegate) const;
        

		bool IsValid() const;
		TSharedRef<IHttpRequest> SendRequest(const TCHAR* Path, const TSharedPtr<FJsonObject>& Body) const;
		void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& Respose) const;

		FString Url;
		FString AuthKey;
		FString AuthValue;
	};

}
