/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGStoreApi.h"

#include "SWGModule.h"
#include "SWGModel.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace Swagger 
{

SWGStoreApi::SWGStoreApi() {}

SWGStoreApi::~SWGStoreApi() {}

SWGStoreApi::SWGStoreApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void SWGStoreApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void SWGStoreApi::SetAuthCredentials(const FString& InAuthKey, const FString& InAuthValue)
{
	AuthKey = InAuthKey;
	AuthValue = InAuthValue;
}

bool SWGStoreApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(Log, Error, TEXT("SWGStoreApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

TSharedRef<IHttpRequest> SWGStoreApi::SendRequest(const TCHAR* Path, const TSharedPtr<FJsonObject>& Body) const
{
	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetVerb(TEXT("POST"));
	HttpRequest->SetURL(*FString::Printf(TEXT("%s/%s"), *Url, Path));
	HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));

	if (!AuthKey.IsEmpty())
		HttpRequest->SetHeader(AuthKey, AuthValue);

	FString JsonString;
	auto Writer = TJsonWriterFactory<>::Create(&JsonString);
	FJsonSerializer::Serialize(Body.ToSharedRef(), Writer);

	UE_LOG(Log, Verbose, TEXT("Sending Http request to (%s):\n%s"), *HttpRequest->GetURL(), *JsonString);

	HttpRequest->SetContentAsString(JsonString);
	return HttpRequest;
}

void SWGStoreApi::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const
{
	InOutResponse._Success = bSucceeded;

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse._ResponseCode = (EHttpResponseCodes::Type)HttpResponse->GetResponseCode();
		FString Content = HttpResponse->GetContentAsString();

		UE_LOG(Log, Verbose, TEXT("Received response:: \n%s"), *Content);

		TSharedPtr<FJsonObject> JsonObject;
		auto Reader = TJsonReaderFactory<>::Create(Content);

		if (FJsonSerializer::Deserialize(Reader, JsonObject) && JsonObject.IsValid())
		{
			if (EHttpResponseCodes::IsOk(InOutResponse._ResponseCode))
			{
				if (InOutResponse.FromJson(JsonObject))
					return; //Successfully parsed
			}
			else
			{
				if (InOutResponse.ErrorFromJson(JsonObject))
					return; //Successfully parsed
			}
		}

		UE_LOG(Log, Error, TEXT("Failed to deserialize Http response content:\n%s"), *Content);
		InOutResponse._Success = false;
		return;
	}

	// Assume we failed to reach the server
	InOutResponse._ResponseCode = EHttpResponseCodes::RequestTimeout;
}

bool SWGStoreApi::deleteOrder(deleteOrderRequest& Request, const FdeleteOrderDelegate& Delegate /*= FdeleteOrderDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/Store"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGStoreApi::OndeleteOrderResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGStoreApi::OndeleteOrderResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FdeleteOrderDelegate Delegate) const
{
	deleteOrderResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}

bool SWGStoreApi::getInventory(getInventoryRequest& Request, const FgetInventoryDelegate& Delegate /*= FgetInventoryDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/Store"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGStoreApi::OngetInventoryResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGStoreApi::OngetInventoryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FgetInventoryDelegate Delegate) const
{
	getInventoryResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}

bool SWGStoreApi::getOrderById(getOrderByIdRequest& Request, const FgetOrderByIdDelegate& Delegate /*= FgetOrderByIdDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/Store"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGStoreApi::OngetOrderByIdResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGStoreApi::OngetOrderByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FgetOrderByIdDelegate Delegate) const
{
	getOrderByIdResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}

bool SWGStoreApi::placeOrder(placeOrderRequest& Request, const FplaceOrderDelegate& Delegate /*= FplaceOrderDelegate()*/) const
{
	if (IsValid() && !Request.IsValid())
		return false;

	auto HttpRequest = SendRequest(TEXT("/Store"), Request.ToJson());
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SWGStoreApi::OnplaceOrderResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SWGStoreApi::OnplaceOrderResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FplaceOrderDelegate Delegate) const
{
	placeOrderResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
}


}
