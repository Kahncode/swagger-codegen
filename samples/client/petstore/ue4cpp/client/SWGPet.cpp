/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGPet.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"

namespace Swagger 
{



	bool SWGPetRequest::IsValid() const
	{
        //TODO: test which parameters need to be set for valid request
		return true;
	}

    TSharedPtr<FJsonObject> SWGPetRequest::ToJson() const
	{
		auto JsonObject = MakeShared<FJsonObject>();

        JsonObject->SetNumberField("id", id);
        JsonObject->SetNumberField("category", category);
        JsonObject->SetNumberField("name", name);
        JsonObject->SetNumberField("photo_urls", photo_urls);
        JsonObject->SetNumberField("tags", tags);
        JsonObject->SetNumberField("status", status);

		return JsonObject;
	}

	bool SWGPetResponse::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
	{
		bool ParseSuccess = true;

        ParseSuccess &= JsonObject->TryGetNumberField("id", id);
        ParseSuccess &= JsonObject->TryGetNumberField("category", category);
        ParseSuccess &= JsonObject->TryGetNumberField("name", name);
        ParseSuccess &= JsonObject->TryGetNumberField("photo_urls", photo_urls);
        ParseSuccess &= JsonObject->TryGetNumberField("tags", tags);
        ParseSuccess &= JsonObject->TryGetNumberField("status", status);

		return ParseSuccess;
	}

	bool SWGPetResponse::ErrorFromJson(const TSharedPtr<FJsonObject>& JsonObject)
	{
		_Error = MakeUnique<SWGPetErrorDetails>();
		return _Error->FromJson(JsonObject);
	}

	bool SWGPetResponse::SWGPetErrorDetails::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
	{
		//TODO :!
		return true;
	}
}


}
