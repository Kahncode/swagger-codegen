/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGUser.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"

namespace Swagger 
{



	bool SWGUserRequest::IsValid() const
	{
        //TODO: test which parameters need to be set for valid request
		return true;
	}

    TSharedPtr<FJsonObject> SWGUserRequest::ToJson() const
	{
		auto JsonObject = MakeShared<FJsonObject>();

        JsonObject->SetNumberField("id", id);
        JsonObject->SetNumberField("username", username);
        JsonObject->SetNumberField("first_name", first_name);
        JsonObject->SetNumberField("last_name", last_name);
        JsonObject->SetNumberField("email", email);
        JsonObject->SetNumberField("password", password);
        JsonObject->SetNumberField("phone", phone);
        JsonObject->SetNumberField("user_status", user_status);

		return JsonObject;
	}

	bool SWGUserResponse::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
	{
		bool ParseSuccess = true;

        ParseSuccess &= JsonObject->TryGetNumberField("id", id);
        ParseSuccess &= JsonObject->TryGetNumberField("username", username);
        ParseSuccess &= JsonObject->TryGetNumberField("first_name", first_name);
        ParseSuccess &= JsonObject->TryGetNumberField("last_name", last_name);
        ParseSuccess &= JsonObject->TryGetNumberField("email", email);
        ParseSuccess &= JsonObject->TryGetNumberField("password", password);
        ParseSuccess &= JsonObject->TryGetNumberField("phone", phone);
        ParseSuccess &= JsonObject->TryGetNumberField("user_status", user_status);

		return ParseSuccess;
	}

	bool SWGUserResponse::ErrorFromJson(const TSharedPtr<FJsonObject>& JsonObject)
	{
		_Error = MakeUnique<SWGUserErrorDetails>();
		return _Error->FromJson(JsonObject);
	}

	bool SWGUserResponse::SWGUserErrorDetails::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
	{
		//TODO :!
		return true;
	}
}


}
